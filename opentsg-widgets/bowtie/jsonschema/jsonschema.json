{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "Test Card Schema",
    "description": "The Schmea for the bowtie section of the test card generator",
    "type": "object",
    "properties": {
       
        "colorSpace": {
            "type": "object"
        },
        "blend": {
            "type": "string",
            "enum": [
                "sin"
            ],
            "description": "The blend method between two neighbouring segments"
        },
        "cwRotation": {
            "anyOf": [
                {
                    "$ref": "#/$defs/radian1"
                },
                {
                    "$ref": "#/$defs/radian2"
                },
                {
                    "$ref": "#/$defs/degree"
                }
            ]
        },
        "startAngle": {
            "anyOf": [
                {
                    "$ref": "#/$defs/radian1"
                },
                {
                    "$ref": "#/$defs/radian2"
                },
                {
                    "$ref": "#/$defs/degree"
                }
            ]
        },
        "segmentCount": {
            "type": "integer",
            "minimum": 4,
            "maximum": 1000
        },
        "segmentColors": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/anycolour"
            }
        },
        "offset": {
            "type": "object",
            "properties": {
                "x": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/percent1"
                        },
                        {
                            "$ref": "#/$defs/percent2"
                        },
                        {
                            "$ref": "#/$defs/pixel"
                        }
                    ]
                },
                "y": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/percent1"
                        },
                        {
                            "$ref": "#/$defs/percent2"
                        },
                        {
                            "$ref": "#/$defs/pixel"
                        }
                    ]
                }
            },
            "additionalProperties":false ,
            "description":"The offset of the image placement in the x and y direction"
        } 
    },
    "required": [
        "segmentCount"
    ],
    "additionalProperties": false,
    "$defs": {
        "pixel": {
            "type": "string",
            "desciption": "pattern requires a pi then star with a number, which can be divided by a resulting number",
            "pattern":"^-{0,1}\\d{1,}px$",
            "description": "pixel value to move the image"
        },
        "percent1": {
            "type": "string",
            "desciption": "pattern requires a pi then star with a number, which can be divided by a resulting number",
            "pattern": "^-{0,1}\\d{0,2}\\.{1}\\d{0,}%$|^-{0,1}\\d{0,2}%$|^-{0,1}(100)%$|^100\\.[0]*%$",
            "description": "percentage value to move the image, e.g. 25%"
        },
        "percent2": {
            "type": "number",
            "minimum": -100,
            "maximum": 100,
            "description": "The percentage of the image for it to be shifted"
        },
        "radian1": {
            "type": "string",
            "desciption": "pattern requires a pi then star with a number, which can be divided by a resulting number",
            "pattern": "^π\\*(\\d){1,4}$|^[0-9]{1,}$|^[0-9]{1,}\\.[0-9]{1,}$",
            "description": "## Example\nThis is a multiplication of π up to 4 digits\n### Acceptable input\n- π*2\n- π*3332\n### Unacceptable input\n- π*0.5\n- π*12345"
        },
        "radian2": {
            "type": "string",
            "desciption": "pattern requires a pi then star with a number, which can be divided by a resulting number",
            "pattern": "^π\\*(\\d){1,4}/{1}(\\d){1,4}$",
            "description": "## Example\nThis is a multiplication of π up to 4 digits/4 digits \n### Acceptable input\n- π*1/22\n- π*7/3332\n### Unacceptable input\n- π*12345/3\n- π*0.5/3"
        },
        "degree": {
            "type": "number",
            "minimum": 0,
            "maximum": 360,
            "description": "## Degrees can be any number between 0 and 360"
        },
        "gridschema": {
            "properties": {
                "location": {
                    "anyOf": [
                        {
                            "type": "string",
                            "pattern": "^[a-pA-P]{1}[0-8]{1}$"
                        },
                        {
                            "type": "string",
                            "pattern": "^[\\w\\W]{1,30}$"
                        }
                    ],
                    "description": "The location of the module to be added to the test card"
                },
                "alias": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 30,
                    "description": "The name to refer to the chosen grid location for the module, these are reset for each section in the array and are optional"
                }
            },
            "required": [
                "location"
            ],
            "additionalProperties": false
        },
        "anycolour": {
            "anyOf": [
                {
                    "$ref": "#/$defs/colourReg/6hex"
                },
                {
                    "$ref": "#/$defs/colourReg/3hex"
                },
                {
                    "$ref": "#/$defs/colourReg/8hex"
                },
                {
                    "$ref": "#/$defs/colourReg/4hex"
                },
                {
                    "$ref": "#/$defs/colourReg/cssrgb"
                },
                {
                    "$ref": "#/$defs/colourReg/cssrgba"
                },
                {
                    "$ref": "#/$defs/colourReg/cssrgb12"
                },
                {
                    "$ref": "#/$defs/colourReg/cssrgba12"
                }
            ]
        },
        "colourReg": {
            "6hex": {
                "type": "string",
                "pattern": "^#[A-Fa-f0-9]{6}$",
                "description": "## Example\n This follows the pattern #rrggbb in hexcode, the values can be 0-9 and a-f e.g. #c45ea3 is acceptable but #aga6ah is not."
            },
            "3hex": {
                "type": "string",
                "pattern": "^#[A-Fa-f0-9]{3}$",
                "description": "## Example\nThis follows the pattern #rgb in single hexcode, the values can be 0-9 and a-f e.g. #c53 is acceptable but #g6h is not."
            },
            "8hex": {
                "type": "string",
                "pattern": "^#[A-Fa-f0-9]{8}$",
                "description": "## Example\nThis follows the pattern #rrggbbaa in hexcode, the values can be 0-9 and a-f e.g. #c45ea3ff is acceptable but #aga6ahff is not."
            },
            "4hex": {
                "type": "string",
                "pattern": "^#[A-Fa-f0-9]{4}$",
                "description": "## Example\nThis follows the pattern #rgba in single hexcode, the values can be 0-9 and a-f e.g. #c53f is acceptable but #g6h is not."
            },
            "cssrgba": {
                "type": "string",
                "pattern": "^(rgba\\()\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\)$",
                "description": "## Example\nThis follows the pattern rgba(rval,gval,bval,aval), the values are between 0.255 e.g. rgb(240,220,4,255) is acceptable but rgb(240,-5,400,23) is not."
            },
            "cssrgb": {
                "type": "string",
                "pattern": "^(rgb\\()\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5]),\\b([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\)$",
                "description": "## Example\nThis follows the pattern rgb(rval,gval,bval), the values are between 0.255 e.g. rgb(240,220,4) is acceptable but rgb(240,-5,400) is not."
            },
            "cssrgb12": {
                "type": "string",
                "pattern": "^rgb12\\(([0-3]?[0-9]{1,3}|40[0-9][0-5]|40[0-8][0-9]),([0-3]?[0-9]{1,3}|40[0-9][0-5]|40[0-8][0-9]),([0-3]?[0-9]{1,3}|40[0-9][0-5]|40[0-8][0-9])\\)$$"
            },
            "cssrgba12": {
                "type": "string",
                "pattern": "^rgba12\\(([0-3]?[0-9]{1,3}|40[0-9][0-5]|40[0-8][0-9]),([0-3]?[0-9]{1,3}|40[0-9][0-5]|40[0-8][0-9]),([0-3]?[0-9]{1,3}|40[0-9][0-5]),([0-3]?[0-9]{1,3}|40[0-9][0-5]|40[0-8][0-9])\\)$"
            }
        }
    }
}